{"ast":null,"code":"import streams from '../apis/streams';\nimport { SIGN_IN, SIGN_OUT, CREATE_STREAM, FETCH_STREAMS, FETCH_STREAM, EDIT_STREAM, DELETE_STREAM } from './types';\nexport const signIn = userId => {\n  return {\n    type: SIGN_IN,\n    payload: userId\n  };\n};\nexport const signOut = () => {\n  return {\n    type: SIGN_OUT\n  };\n};\nexport const createStream = formValues => async (dispatch, getState) => {\n  const {\n    userId\n  } = getState().auth;\n  const response = await streams.post('/streams', { ...formValues,\n    userId\n  });\n  dispatch({\n    type: CREATE_STREAM,\n    payload: response.data\n  });\n};\nexport const fetchStreams = () => async dispatch => {\n  const response = await streams.get('/streams');\n  dispatch({\n    type: FETCH_STREAMS,\n    payload: response.data\n  });\n};\nexport const fetchStream = id => async dispatch => {\n  const response = await streams.get(`/streams/${id}`);\n  dispatch({\n    type: FETCH_STREAM,\n    payload: response.data\n  });\n};\nexport const editStream = (id, formValues) => async dispatch => {\n  const response = await streams.put(`/streams/${id}`, formValues);\n  dispatch({\n    type: EDIT_STREAM,\n    payload: response.data\n  });\n};\nexport const deleteStream = id => async dispatch => {\n  await streams.delete(`/streams/${id}`);\n  dispatch({\n    type: DELETE_STREAM,\n    payload: id\n  });\n};","map":{"version":3,"sources":["/Users/txago/Documents/streams/client/src/actions/index.js"],"names":["streams","SIGN_IN","SIGN_OUT","CREATE_STREAM","FETCH_STREAMS","FETCH_STREAM","EDIT_STREAM","DELETE_STREAM","signIn","userId","type","payload","signOut","createStream","formValues","dispatch","getState","auth","response","post","data","fetchStreams","get","fetchStream","id","editStream","put","deleteStream","delete"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,iBAApB;AACA,SACCC,OADD,EAECC,QAFD,EAGCC,aAHD,EAICC,aAJD,EAKCC,YALD,EAMCC,WAND,EAOCC,aAPD,QAQO,SARP;AAUA,OAAO,MAAMC,MAAM,GAAIC,MAAD,IAAY;AACjC,SAAO;AACNC,IAAAA,IAAI,EAAET,OADA;AAENU,IAAAA,OAAO,EAAEF;AAFH,GAAP;AAIA,CALM;AAOP,OAAO,MAAMG,OAAO,GAAG,MAAM;AAC5B,SAAO;AACNF,IAAAA,IAAI,EAAER;AADA,GAAP;AAGA,CAJM;AAMP,OAAO,MAAMW,YAAY,GAAIC,UAAD,IAAgB,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AACzE,QAAM;AAAEP,IAAAA;AAAF,MAAaO,QAAQ,GAAGC,IAA9B;AACA,QAAMC,QAAQ,GAAG,MAAMlB,OAAO,CAACmB,IAAR,CAAa,UAAb,EAAyB,EAAE,GAAGL,UAAL;AAAiBL,IAAAA;AAAjB,GAAzB,CAAvB;AAEAM,EAAAA,QAAQ,CAAC;AAAEL,IAAAA,IAAI,EAAEP,aAAR;AAAuBQ,IAAAA,OAAO,EAAEO,QAAQ,CAACE;AAAzC,GAAD,CAAR;AACA,CALM;AAOP,OAAO,MAAMC,YAAY,GAAG,MAAM,MAAON,QAAP,IAAoB;AACrD,QAAMG,QAAQ,GAAG,MAAMlB,OAAO,CAACsB,GAAR,CAAY,UAAZ,CAAvB;AAEAP,EAAAA,QAAQ,CAAC;AAAEL,IAAAA,IAAI,EAAEN,aAAR;AAAuBO,IAAAA,OAAO,EAAEO,QAAQ,CAACE;AAAzC,GAAD,CAAR;AACA,CAJM;AAMP,OAAO,MAAMG,WAAW,GAAIC,EAAD,IAAQ,MAAOT,QAAP,IAAoB;AACtD,QAAMG,QAAQ,GAAG,MAAMlB,OAAO,CAACsB,GAAR,CAAa,YAAWE,EAAG,EAA3B,CAAvB;AAEAT,EAAAA,QAAQ,CAAC;AAAEL,IAAAA,IAAI,EAAEL,YAAR;AAAsBM,IAAAA,OAAO,EAAEO,QAAQ,CAACE;AAAxC,GAAD,CAAR;AACA,CAJM;AAMP,OAAO,MAAMK,UAAU,GAAG,CAACD,EAAD,EAAKV,UAAL,KAAoB,MAAOC,QAAP,IAAoB;AACjE,QAAMG,QAAQ,GAAG,MAAMlB,OAAO,CAAC0B,GAAR,CAAa,YAAWF,EAAG,EAA3B,EAA8BV,UAA9B,CAAvB;AAEAC,EAAAA,QAAQ,CAAC;AAAEL,IAAAA,IAAI,EAAEJ,WAAR;AAAqBK,IAAAA,OAAO,EAAEO,QAAQ,CAACE;AAAvC,GAAD,CAAR;AACA,CAJM;AAMP,OAAO,MAAMO,YAAY,GAAIH,EAAD,IAAQ,MAAOT,QAAP,IAAoB;AACvD,QAAMf,OAAO,CAAC4B,MAAR,CAAgB,YAAWJ,EAAG,EAA9B,CAAN;AAEAT,EAAAA,QAAQ,CAAC;AAAEL,IAAAA,IAAI,EAAEH,aAAR;AAAuBI,IAAAA,OAAO,EAAEa;AAAhC,GAAD,CAAR;AACA,CAJM","sourcesContent":["import streams from '../apis/streams';\nimport {\n\tSIGN_IN,\n\tSIGN_OUT,\n\tCREATE_STREAM,\n\tFETCH_STREAMS,\n\tFETCH_STREAM,\n\tEDIT_STREAM,\n\tDELETE_STREAM,\n} from './types';\n\nexport const signIn = (userId) => {\n\treturn {\n\t\ttype: SIGN_IN,\n\t\tpayload: userId,\n\t};\n};\n\nexport const signOut = () => {\n\treturn {\n\t\ttype: SIGN_OUT,\n\t};\n};\n\nexport const createStream = (formValues) => async (dispatch, getState) => {\n\tconst { userId } = getState().auth;\n\tconst response = await streams.post('/streams', { ...formValues, userId });\n\n\tdispatch({ type: CREATE_STREAM, payload: response.data });\n};\n\nexport const fetchStreams = () => async (dispatch) => {\n\tconst response = await streams.get('/streams');\n\n\tdispatch({ type: FETCH_STREAMS, payload: response.data });\n};\n\nexport const fetchStream = (id) => async (dispatch) => {\n\tconst response = await streams.get(`/streams/${id}`);\n\n\tdispatch({ type: FETCH_STREAM, payload: response.data });\n};\n\nexport const editStream = (id, formValues) => async (dispatch) => {\n\tconst response = await streams.put(`/streams/${id}`, formValues);\n\n\tdispatch({ type: EDIT_STREAM, payload: response.data });\n};\n\nexport const deleteStream = (id) => async (dispatch) => {\n\tawait streams.delete(`/streams/${id}`);\n\n\tdispatch({ type: DELETE_STREAM, payload: id });\n};\n"]},"metadata":{},"sourceType":"module"}